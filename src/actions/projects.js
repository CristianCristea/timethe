import moment from 'moment';
import database from '../firebase/firebase';

// ADD_PROJECT
export const addProject = project => ({
  type: 'ADD_PROJECT',
  project,
});

// store the project in the database
// then dispatch the action to change the redux store
// use the id generated by the database(the key)
export const startAddProject = (projectData = {}) => {
  // returned function is called internally by redux with dispatch arg
  // allows to call dispatch after workinkg with the database
  return (dispatch) => {
    const {
      name,
      description,
      sessions = [],
      startDate = moment().unix(),
      archived = '',
    } = projectData;
    const project = {
      name,
      description,
      sessions,
      startDate,
      archived,
    };

    // return promise for promise chanining in the test suite
    return database.ref('projects').push(project).then((ref) => {
      dispatch(addProject({
        id: ref.key,
        ...project,
      }));
    });
  };
};

// EDIT_PROJECT
export const editProject = (id, updates) => ({
  type: 'EDIT_PROJECT',
  id,
  updates,
});

export const startEditProject = (id, updates) => {
  return (dispatch) => {
    return database.ref(`projects/${id}`).update(updates).then(() => {
      dispatch(editProject(id, updates));
    });
  };
};

// DELETE_PROJECT
export const deleteProject = id => ({
  type: 'DELETE_PROJECT',
  id,
});


export const startDeleteProject = (id) => {
  return (dispatch) => {
    return database.ref(`projects/${id}`).remove().then(() => dispatch(deleteProject(id)));
  };
};

// SET_PROJECTS
export const setProjects = projects => ({
  type: 'SET_PROJECTS',
  projects,
});

// START_SET_PROJECTS
// populates the state with the projects from the database
export const startSetProjects = () => {
  return (dispatch) => {
    return database.ref('projects').once('value').then((snapshot) => {
      const projects = [];

      snapshot.forEach((childSnapshot) => {
        projects.push({
          id: childSnapshot.key,
          ...childSnapshot.val(),
        });
      });

      dispatch(setProjects(projects));
    });
  };
};
